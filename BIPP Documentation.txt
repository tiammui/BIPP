BIPP is a simple module that can be integrated with any website/web app.
BIPP is an abbreviatiion for "Background-Image Picture Processing".
BIPP main aim is to simplify image processing leveraging on CSS 'background-image', 'background-size' and 'background-position' properties.
BIPP is designed to work on old and new browsers by ensuring pure Javascript and cross-platform CSS properties.
BIPP can be customized to suit developers needs.
BIPP is a module that help developers collect pictures from users and give users calculated limited option to choose a frame that is best for them(it eliminate users need to edit picture them self, making the picture collection process simple for users and the developer) based on the developers specification.
BIPP enable developers choose the aspect ratio of image they want to collect.
BIPP's bipp-style the user chose can be assessed from 'document.bippForm.bippStyle.value' which can be stored by developers alongside other metadata of the picture

----------------------
INTEGRATION OF BIPP MODULE
-----------------------
    1. To integrate BIPP to your website or web app the below codes should be copied into the <body> tag (preferably the bottom of the <body> tag).

        <link rel="stylesheet" type="text/css" href="bipp.css">
        <script type="text/javascript" src="bipp_loader.js"></script>
        <script type="text/javascript" src="bipp.js" async></script>

    NOTE;- the 2nd <script> tag has an attribute of 'async' it to prevent Event Listeners used in the module from loading before the module configuration pass some element into the DOM.

    2. below code should be copied to where you want the module UI(User Interface) to be located in your mark-up

        <div id="bipp-module"></div>

    NOTE;- Only one bipp module can be integrated in a web document

    3. to initialise the module 'bipp.startBipp()' function should be called with bipp configuration object as it only argument (see example below)

        // BIPP configuration object
        // read more about BIPP configuration in next section
        var bippConfig = {
            frameWidth:200,
            measurementUnit:"px",
            aspectRatio:0.5,
            uploaderHtml:"",
            uploadPrompt:"",
            changeFilePrompt:"",
            changeButton:"",
            uploadStatus:true,
            feedbackImgUrl:"",
            compression:true
        };

        // call to initialise module with configuration object above
        bipp.startBipp(bippConfig);


---------------------
BIPP CONFIGURATION
---------------------
    This section would explain how you can use create and use a BIPP config object to customize the UI of the module

        // BIPP configuration object with complete properties
        var bippConfig = {
            frameWidth: 150,
            measurementUnit: "px",
            aspectRatio: 1,
            uploaderHtml: 
                '<div style="border:gray dashed 5px;width:250px; height:150px; color:grey; padding-top:10px;cursor: pointer;">
                    <span style="font-size:60px;font-weight: 1000;" >
                        &plus;
                    </span><br>
                    <span>
                        Upload a picture to test <b>BIPP</b>
                    </span>
                </div>',
            uploadPrompt: "Choose A Frame That suit you",
            changeFilePrompt:"",
            changeButton: "Change Picture",
            uploadStatus:
            true,
            feedbackImgUrl:"http://mvp.ng/cummins/pics/check.png",
            compression:true
        };

    NOTE;- BIPP have fallback value for property, meaning when any value of the configuration object's property is not specified/given the module use the in-built value of the properties

    > frameWidth [Data-type: Number][Default/In-built Value: 150]- this property is used to define the width of each frame.

    > measurementUnit [Data-type: String][Default/In-built Value: "px"]- this property determine the CSS measurement unit of the frameWidth property value explained above. any absolute or relative unit can be used.

    > aspectRatio [Data-type: Number][Default/In-built Value: 1]- it used to specify the aspect ratio of each frame, with the frameWidth property as reference it the ratio of frame width to it height, see example below

        if the frameWidth property has the value of 150 with measurementUnit property having "px" as it value and aspectRatio property has the value of 1.5 then each frame will have the width of 150px and height of 100px(the module internally divide the frameWidth value by the aspectRatio value to get the frame height)

    > uploaderHtml [Data-type: String][Default/In-built Value: 
        '<div style="border:gray dashed 5px;width:250px; height:150px; color:grey; padding-top:10px;cursor: pointer;">
            <span style="font-size:60px;font-weight: 1000;" >
            &plus;
            </span><br>
            <span>
                Upload a picture to test <b>BIPP</b>
            </span>
        </div>'
    ]- this property is used to customize how you want the picture uploader UI to look like, it works exactly like assigning innerHTML to any HTML tag, caution must be taken when assigning value to this property, especially the usage of double-quotes, single-quote, backticks and some other symbols, it adviseable the developer have a working knowledge of how to assign value to innerHTML of element before editing this property

    > uploadPrompt [Data-type: String][Default/In-built Value: "Choose A Frame That suit you"]- use to customize what prompt the user to choose a frame after a picture has been uploaded into the module. work like assigning innerHTML value to an element.
    NOTE;- it totally different from uploadStatus property because it only appear when a picture is selected.

    > uploadStatus [Data-type: Boolean][Default/In-built Value: true]- this property is used to choose if you want the user to know when a picture is selected or not, assigning true to this property means you want users to know when a picture is selected and vice-versa.
    NOTE;- it totally different from uploadPrompt property because it appears everytime.

    > changeFilePrompt [Data-type: String][Default/In-built Value: "if you don't find a frame that suit you, it advisable to change the picture you want to upload"]- use to customize what prompt the user to select another picture if user doesn't like how the presently uploaded picture in the module is displayed in frames, work like assigning innerHTML value to an element.

    > changeButton [Data-type: String][Default/In-built Value: "Change Picture"]- use to customize the content of the button that change picture when user doesn't like how the presently uploaded picture in the module is displayed in frames, works like assigning innerHTML value to an element.

    > feedbackImgUrl [Data-type: String/Reference][Default/In-built Value: "http://mvp.ng/cummins/pics/check.png"]- this property specify the link/directory reference to the picture that shows as feedback to let user know when a frame is selected, it adviseable to use a picture with transparent background with an aspect ratio of 1 to 1.

    > compression [Data-type: Boolean][Default/In-built Value: true]- this property is used to choose if you want the picture user selected to be compressed and cropped before been passed to bippFile or not, assigning true to this property means you want users picture to compressed and vice-versa.

    > lazyLoad [Data-type: Boolean][Default/In-built Value: true]- this property is used to choose if you want decoded pictures to lazy-load or not, assigning true to this property means you want decoded pictures lazy-loaded and vice-versa.


----------------------
STYLING
----------------------
    to further style BIPP module to suit your need, all the CSS classes and IDs listed below can be edited to adjust how the module looks
    >    #bipp-module - to customize the whole module style

    >    .bipp-frame - to customize frames
    NOTE;- DO NOT edit it width, height, display and position properties, doing so can lead to the malfunctioning of the module

    >    .bipp-curtain - to customize the feedback curtain
    NOTE;- DO NOT edit it width, height, position, top, left, right, bottom and display properties, doing so can lead to the malfunctioning of the module

    >    .bipp-feedback-image - to customize the feedback image
    NOTE;- DO NOT edit it width, height and display properties, doing so can lead to the malfunctioning of the module

    >    #bipp-change-button - to customize the button that change picture when the user doesn't like how the presently uploaded picture in the module is displayed in frames.

    >   .bipp-label-con - to align the frames, so developer is expected to edit it only for the sole purpose of alignment of the frames
    NOTE;- DO NOT edit it width properties, doing so can lead to the malfunctioning of the module

    >   #bipp-uploader-con - to align the uploader, so developer is expected to edit it only for the sole purpose of alignment of the uploader
    NOTE;- DO NOT edit it width properties, doing so can lead to the malfunctioning of the module


-----------------------
MODULE OUTPUT
-----------------------
    The module produces two output after a user select the frame they want, the BIPP style and picture file

    >   Getting the BIPP style:- the BIPP style can be gotten at 'document.bippForm.bippStyle.value'

    >   Getting the picture file:- the picture file is passed into a global variable named "bippFile" by the module.


-----------------------
BIPP DECODING
-----------------------
    BIPP module also contain a decoder that get the BIPP style of a picture from the picture's meta-data and use it to render the picture on the page.

    >DECODING GROUP OF PICTURES

        the bipp.decode() function is used to get info about the picture to be rendered;-

            bipp.decode(pictureUrl,bippStyle,classPort)

        the function takes three arguments to be able to render the picture, see example below for more understanding.

        let assume you want to create a profile card and you getting users profile from a database passed into a variable(array in this case) called allUsers.(firestore is used as example here)

            var allUsers = firebase.firestore().collection("users")

        allUsers now contain all users' document in the "users" collection, you can then loop through each document in the collection to get profile information, let assume each document contains the following generic fields

            name: "John Doe",
            pictureUrl: "http//example.com/bucket/xxxx.jpg"
            bippStyle: "center-1.5"
            age: "21"

        making HTML entry to our page from the information gotten from the database

            allUsers.forEach(function(profileInfo){
                document.getElementById("userCard").innerHTML += '<div style="padding: 10px;"><div style="border:grey solid 1px;;padding: 10px;margin:auto;display: table;"><div class="profilePic" style="width:100px;border:grey solid 1px;display: table-cell;"></div><div style="float: none;display: table-cell;vertical-align: middle;">Name: '+profileInfo.name+'<br> Age: '+profileInfo.name+'</div></div></div>'

                bipp.decode(profileInfo.pictureUrl,profileInfo.bippStyle,"profilePic")
            })

        the above code get information from each document in the "users" collection and create profile card for each user from the document fields(e.g profileInfo.name) into an element with the id of "userCard", end of the above code call the bipp.decode() function which have the user profile picture url pass as it first argument, the picture BIPP style as second argument and the classPort of the Picture.


        >   bipp.decode() first argument(picture URL):- it collect the url of the users picture, which will be use as background-image of each containers(that have the classname specified in the third argument) that would be rendered

        >   bipp.decode() second argument(BIPP style):- it collect the BIPP style of each image that would be rendered

        >   bipp.decode() third argument(classPort):- it collects the classname that will have it background-image rendered, the decoder look for elements with the classname and pass their respective picture url into their background-image in the order that they are created by the HTML above code



---------------------
GENERAL NOTE
---------------------
    During the writing of this module cross-browser compatibility and assessibility was put into consideration, the module can run on older and newer version browsers, sophisticated codes were avoided to keep the performance at optimal level

------------------
GLOSSARY
------------------
    Frame
    Feedback curtain
    Feedback Image
    Change Button
    Uploader